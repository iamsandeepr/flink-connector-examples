<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>org.sandeep.flink</groupId>
    <artifactId>examples</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <url>http://maven.apache.org</url>

    <modules>
        <module>flinkconnectors</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- Flink related versions -->
        <!-- https://docs.aws.amazon.com/managed-flink/latest/java/flink-1-18.html -->
        <flink.version>1.18.1</flink.version>
        <flink.kafka.version>3.1.0-1.18</flink.kafka.version>
        <flink.opensearch2.version>2.0.0-1.18</flink.opensearch2.version>

        <!-- kafka related versions -->
        <kafka.minicluster.version>3.2.5</kafka.minicluster.version>
        <!-- https://docs.aws.amazon.com/msk/latest/developerguide/supported-kafka-versions.html -->
        <kafka.version>3.5.1</kafka.version>

        <!-- ProtoBuf related versions -->
        <protobuf.version>3.21.7</protobuf.version>
        <protobuf.twitter.serde.version>0.10.0</protobuf.twitter.serde.version>

        <!-- OpenSearch related versions -->
        <opensearch.version>2.13.0</opensearch.version>
        <opensearch.testcontainer.version>2.0.1</opensearch.testcontainer.version>
        <!-- Used by opensearch getResponse class-->
        <jackson.version>2.17.1</jackson.version>

        <!-- Other libraries -->
        <lombok.version>1.18.32</lombok.version>
        <gson.version>2.10.1</gson.version>
        <jetty.version>9.4.51.v20230217</jetty.version>
        <geronimo.version>2.0.0</geronimo.version>

        <!-- Log libraries versions -->
        <slf4j.version>1.7.36</slf4j.version>
        <log4j.version>2.17.2</log4j.version>

        <!-- unit test related versions -->
        <junit.version>4.13.2</junit.version>
        <awaitility.version>4.2.1</awaitility.version>
        <mockito.version>5.12.0</mockito.version>
        <testcontainer.version>1.19.8</testcontainer.version>
        <java.dev.jna.version>5.14.0</java.dev.jna.version>

        <!-- Plugin versions -->
        <maven.release.plugin.version>2.5.2</maven.release.plugin.version>
        <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
        <maven.avro.plugin.version>1.8.1</maven.avro.plugin.version>
        <maven.dependency.plugin.version>3.6.0</maven.dependency.plugin.version>
        <maven.surefire.plugin.version>3.3.0</maven.surefire.plugin.version>
        <maven.jacoco.plugin.version>0.8.12</maven.jacoco.plugin.version>

        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>

        <main.class>dummy</main.class>

    </properties>

    <dependencyManagement>

        <dependencies>

            <!--https://protobuf.dev/overview/ -->
            <dependency>
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java</artifactId>
                <version>${protobuf.version}</version>
            </dependency>

            <dependency>
                <groupId>com.twitter</groupId>
                <artifactId>chill-protobuf</artifactId>
                <version>${protobuf.twitter.serde.version}</version>
            </dependency>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gson.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-protobuf</artifactId>
                <version>${flink.version}</version>
            </dependency>

            <dependency>
                <groupId>com.google.protobuf</groupId>
                <artifactId>protobuf-java-util</artifactId>
                <version>${protobuf.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-connector-dynamodb</artifactId>
                <version>4.2.0-1.18</version>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-avro</artifactId>
                <version>${flink.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-java</artifactId>
                <version>${flink.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-connector-base</artifactId>
                <version>${flink.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-clients</artifactId>
                <version>${flink.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-streaming-java</artifactId>
                <version>${flink.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-runtime-web</artifactId>
                <version>${flink.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-cep</artifactId>
                <version>${flink.version}</version>
            </dependency>

            <!-- Flink Kafka connector -->
            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-connector-kafka</artifactId>
                <version>${flink.kafka.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>>org.apache.flink</groupId>
                        <artifactId>flink-streaming-java</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <dependency>
                <groupId>org.apache.kafka</groupId>
                <artifactId>kafka_2.12</artifactId>
                <version>${kafka.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.kafka</groupId>
                <artifactId>kafka-clients</artifactId>
                <version>${kafka.version}</version>
            </dependency>

            <!-- Logging framework, to produce console output when running in the IDE. -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <!-- API bridge to log4j2 if some dependencies use log4j1 -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-1.2-api</artifactId>
                <version>${log4j.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- API bridge to log4j2 if some dependencies use commons logging -->
           <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-jcl</artifactId>
                <version>${log4j.version}</version>
            </dependency>

            <!-- File System connector, mainly used to test the processed events by sinking them to a local file -->
            <!-- https://mvnrepository.com/artifact/org.apache.flink/flink-connector-files -->
            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-connector-files</artifactId>
                <version>${flink.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- OpenSearch related -->

            <!-- https://nightlies.apache.org/flink/flink-docs-master/docs/connectors/datastream/opensearch/  -->
            <dependency>
                <groupId>org.apache.flink</groupId>
                <artifactId>flink-connector-opensearch2</artifactId>
                <version>${flink.opensearch2.version}</version>
            </dependency>

            <dependency>
                <groupId>org.opensearch</groupId>
                <artifactId>opensearch</artifactId>
                <version>${opensearch.version}</version>
            </dependency>

            <dependency>
                <groupId>org.opensearch.client</groupId>
                <artifactId>opensearch-rest-high-level-client</artifactId>
                <version>${opensearch.version}</version>
            </dependency>

            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-core</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <!-- Using JUnit 4 because of testContainers and kafka-junit4 embedded cluster-->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.eclipse.jetty.aggregate</groupId>
                <artifactId>jetty-all</artifactId>
                <version>${jetty.version}</version>
                <type>pom</type>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.geronimo.components</groupId>
                <artifactId>geronimo-jaspi</artifactId>
                <version>${geronimo.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- Embedded InMemory Kafka for test  -->
            <dependency>
                <groupId>com.salesforce.kafka.test</groupId>
                <artifactId>kafka-junit4</artifactId>
                <version>${kafka.minicluster.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- https://github.com/awaitility/awaitility/wiki/Getting_started -->
            <dependency>
                <groupId>org.awaitility</groupId>
                <artifactId>awaitility</artifactId>
                <version>${awaitility.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- https://github.com/opensearch-project/opensearch-testcontainers  -->
            <dependency>
                <groupId>org.opensearch</groupId>
                <artifactId>opensearch-testcontainers</artifactId>
                <version>${opensearch.testcontainer.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>testcontainers</artifactId>
                <version>${testcontainer.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>net.java.dev.jna</groupId>
                        <artifactId>jna</artifactId>
                    </exclusion>
                </exclusions>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>net.java.dev.jna</groupId>
                <artifactId>jna</artifactId>
                <version>${java.dev.jna.version}</version>
                <scope>test</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>

                <plugin>
                    <groupId>org.apache.avro</groupId>
                    <artifactId>avro-maven-plugin</artifactId>
                    <version>${maven.avro.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>schemas</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>schema</goal>
                                <goal>protocol</goal>
                                <goal>idl-protocol</goal>
                            </goals>
                            <configuration>
                                <stringType>String</stringType>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-release-plugin</artifactId>
                    <version>${maven.release.plugin.version}</version>
                    <configuration>
                        <allowTimestampedSnapshots>true</allowTimestampedSnapshots>
                        <tagNameFormat>gap-${project.version}</tagNameFormat>
                    </configuration>
                </plugin>

                <!-- https://github.com/aws-samples/amazon-managed-service-for-apache-flink-examples/blob/main/java/KafkaConnectors/pom.xml -->
                <!--https://github.com/aws-samples/amazon-managed-service-for-apache-flink-examples/blob/main/java/S3Sink/pom.xml -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven.dependency.plugin.version}</version>
                    <executions>
                        <execution>
                            <id>copy</id>
                            <phase>test-compile</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration>
                                <includeScope>test</includeScope>
                                <includeTypes>so,dll,dylib</includeTypes>
                                <outputDirectory>${project.basedir}/native-libs</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- We use the maven-shade plugin to create a fat jar that contains all necessary dependencies. -->
                <!-- Change the value of <mainClass>...</mainClass> if your program entry point changes. -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>3.2.1</version>
                    <executions>
                        <!-- Run shade goal on package phase -->
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                            <configuration>
                                <artifactSet>
                                    <excludes>
                                        <exclude>org.apache.flink:force-shading</exclude>
                                        <exclude>com.google.code.findbugs:jsr305</exclude>
                                        <exclude>org.slf4j:*</exclude>
                                        <exclude>org.apache.logging.log4j:*</exclude>
                                    </excludes>
                                </artifactSet>
                                <filters>
                                    <filter>
                                        <!-- Do not copy the signatures in the META-INF folder.
                                        Otherwise, this might cause SecurityExceptions when using the JAR. -->
                                        <artifact>*:*</artifact>
                                        <excludes>
                                            <exclude>META-INF/*.SF</exclude>
                                            <exclude>META-INF/*.DSA</exclude>
                                            <exclude>META-INF/*.RSA</exclude>
                                        </excludes>
                                    </filter>
                                </filters>
                                <transformers>
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                    <transformer
                                            implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                        <mainClass>${main.class}</mainClass>
                                    </transformer>
                                </transformers>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.plugin.version}</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.apache.maven.surefire</groupId>
                            <artifactId>surefire-junit47</artifactId>
                            <version>${maven.surefire.plugin.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- https://www.codementor.io/@noelkamphoa/how-to-generate-code-coverage-report-using-jacoco-in-a-java-application-2a3at1ts4l -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${maven.jacoco.plugin.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <!-- attached to Maven test phase -->
                        <execution>
                            <id>report</id>
                            <phase>test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>

</project>